// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: album.proto

package album

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumServicesClient is the client API for AlbumServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServicesClient interface {
	GetAllAlbum(ctx context.Context, in *AlbumEmptyRequest, opts ...grpc.CallOption) (*GetAllAlbumResponse, error)
	GetSingleAlbumWithId(ctx context.Context, in *AlbumWithIdRequest, opts ...grpc.CallOption) (*Album, error)
	PostSingleAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error)
	UpdateSingleAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error)
	DeleteSingleAlbumWithId(ctx context.Context, in *AlbumWithIdRequest, opts ...grpc.CallOption) (*AlbumDeleteInfo, error)
}

type albumServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServicesClient(cc grpc.ClientConnInterface) AlbumServicesClient {
	return &albumServicesClient{cc}
}

func (c *albumServicesClient) GetAllAlbum(ctx context.Context, in *AlbumEmptyRequest, opts ...grpc.CallOption) (*GetAllAlbumResponse, error) {
	out := new(GetAllAlbumResponse)
	err := c.cc.Invoke(ctx, "/album.AlbumServices/GetAllAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServicesClient) GetSingleAlbumWithId(ctx context.Context, in *AlbumWithIdRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/album.AlbumServices/GetSingleAlbumWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServicesClient) PostSingleAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/album.AlbumServices/PostSingleAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServicesClient) UpdateSingleAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/album.AlbumServices/UpdateSingleAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServicesClient) DeleteSingleAlbumWithId(ctx context.Context, in *AlbumWithIdRequest, opts ...grpc.CallOption) (*AlbumDeleteInfo, error) {
	out := new(AlbumDeleteInfo)
	err := c.cc.Invoke(ctx, "/album.AlbumServices/DeleteSingleAlbumWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServicesServer is the server API for AlbumServices service.
// All implementations must embed UnimplementedAlbumServicesServer
// for forward compatibility
type AlbumServicesServer interface {
	GetAllAlbum(context.Context, *AlbumEmptyRequest) (*GetAllAlbumResponse, error)
	GetSingleAlbumWithId(context.Context, *AlbumWithIdRequest) (*Album, error)
	PostSingleAlbum(context.Context, *Album) (*Album, error)
	UpdateSingleAlbum(context.Context, *Album) (*Album, error)
	DeleteSingleAlbumWithId(context.Context, *AlbumWithIdRequest) (*AlbumDeleteInfo, error)
	mustEmbedUnimplementedAlbumServicesServer()
}

// UnimplementedAlbumServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServicesServer struct {
}

func (UnimplementedAlbumServicesServer) GetAllAlbum(context.Context, *AlbumEmptyRequest) (*GetAllAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAlbum not implemented")
}
func (UnimplementedAlbumServicesServer) GetSingleAlbumWithId(context.Context, *AlbumWithIdRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleAlbumWithId not implemented")
}
func (UnimplementedAlbumServicesServer) PostSingleAlbum(context.Context, *Album) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSingleAlbum not implemented")
}
func (UnimplementedAlbumServicesServer) UpdateSingleAlbum(context.Context, *Album) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSingleAlbum not implemented")
}
func (UnimplementedAlbumServicesServer) DeleteSingleAlbumWithId(context.Context, *AlbumWithIdRequest) (*AlbumDeleteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleAlbumWithId not implemented")
}
func (UnimplementedAlbumServicesServer) mustEmbedUnimplementedAlbumServicesServer() {}

// UnsafeAlbumServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServicesServer will
// result in compilation errors.
type UnsafeAlbumServicesServer interface {
	mustEmbedUnimplementedAlbumServicesServer()
}

func RegisterAlbumServicesServer(s grpc.ServiceRegistrar, srv AlbumServicesServer) {
	s.RegisterService(&AlbumServices_ServiceDesc, srv)
}

func _AlbumServices_GetAllAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServicesServer).GetAllAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumServices/GetAllAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServicesServer).GetAllAlbum(ctx, req.(*AlbumEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumServices_GetSingleAlbumWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumWithIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServicesServer).GetSingleAlbumWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumServices/GetSingleAlbumWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServicesServer).GetSingleAlbumWithId(ctx, req.(*AlbumWithIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumServices_PostSingleAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServicesServer).PostSingleAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumServices/PostSingleAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServicesServer).PostSingleAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumServices_UpdateSingleAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServicesServer).UpdateSingleAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumServices/UpdateSingleAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServicesServer).UpdateSingleAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumServices_DeleteSingleAlbumWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumWithIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServicesServer).DeleteSingleAlbumWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumServices/DeleteSingleAlbumWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServicesServer).DeleteSingleAlbumWithId(ctx, req.(*AlbumWithIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumServices_ServiceDesc is the grpc.ServiceDesc for AlbumServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.AlbumServices",
	HandlerType: (*AlbumServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAlbum",
			Handler:    _AlbumServices_GetAllAlbum_Handler,
		},
		{
			MethodName: "GetSingleAlbumWithId",
			Handler:    _AlbumServices_GetSingleAlbumWithId_Handler,
		},
		{
			MethodName: "PostSingleAlbum",
			Handler:    _AlbumServices_PostSingleAlbum_Handler,
		},
		{
			MethodName: "UpdateSingleAlbum",
			Handler:    _AlbumServices_UpdateSingleAlbum_Handler,
		},
		{
			MethodName: "DeleteSingleAlbumWithId",
			Handler:    _AlbumServices_DeleteSingleAlbumWithId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album.proto",
}
